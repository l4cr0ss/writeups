What do I know?

- a plaintext and corresponding ciphertext encrypted under some keys
  > the plaintext string is 16 characters long
    > aaaaaaaaaaaaaaaa
  > the resulting cipher is 128 characters long
    > ef92fab38516aa95fdc53c2eb7e8fe1d5e12288fdc9d026e30469f38ca87c305ef92fab38516aa95fdc53c2eb7e8fe1d5e12288fdc9d026e30469f38ca87c305

- an encrypted ciphertext corresponding to the plaintext flag
  > the cipher is 256 characters long
    > fa364f11360cef2550bd9426948af22919f8bdf4903ee561ba3d9b9c7daba4e759268b5b5b4ea2589af3cf4abe6f9ae7e33c84e73a9c1630a25752ad2a984abfbbfaca24f7c0b4313e87e396f2bf5ae56ee99bb03c2ffdf67072e1dc98f9ef691db700d73f85f57ebd84f5c1711a28d1a50787d6e1b5e726bc50db5a3694f576
  > the plaintext is 32 bytes

- the size of the block-based cipher is 16 bytes 
  > for i in {16..17}; do echo $(python2 -c "print 'a' * $i") | python2 source.py | head -n4 | tail -n1 | wc -c; done 

- the keys are bad
  >>> key1 = '0'*13 + ''.join([random.choice(printable) for _ in range(3)])
  >>> print key1
  0000000000000???
  >>> key2 = ''.join([random.choice(printable) for _ in range(3)]) + '0'*13
  >>> print key2
  ???0000000000000

How does ECB work?
  - The flag is divided into blocks of bytes and each block is encrypted separately
    > the blocksize here is 16 bytes
    > the same key is used to encrypt each block
    > a given plaintext and a given key will always result in a given ciphertext

I hypothesize that the keys can be xor'd together for this problem

from Crypto.Cipher import AES
from string import printable

cipher1 = AES.new(key=key1, mode=AES.MODE_ECB)
cipher2 = AES.new(key=key2, mode=AES.MODE_ECB)

function chunk(msg):
  if not len(msg) % 16 == 0:
    pt += '0'*(16 - val)
    return [msg[i*16:(i+1)*16] for i in range((len(msg)+16-1)//16)]

function _encrypt(block, keys)
  c1 = AES.new(key=keys[0], mode=AES.MODE_ECB)
  c2 = AES.new(key=keys[1], mode=AES.MODE_ECB)
  ct = c2.encrypt(c1.encrypt(block.encode('hex')).encode('hex'))

function encrypt(blocks, keys):
  for block in blocks:
    return _encrypt(block, keys)

keys = ['00000000000004Ph', '0ep0000000000000']
mkey = ['0ep00000000004Ph'][0]
msg = 'aaaaaaaaaaaaaaaa'
c_msg = 'ef92fab38516aa95fdc53c2eb7e8fe1d5e12288fdc9d026e30469f38ca87c305ef92fab38516aa95fdc53c2eb7e8fe1d5e12288fdc9d026e30469f38ca87c305'.decode('hex')
blocks = chunk(msg)
flag = encrypt(blocks, keys)

